#!/usr/bin/env bash

set -x

<%-
working_dir_host = '${PWD}'
working_dir_container = working_dir_host
%>

#
# Start RStudio Server
#

# PAM auth helper used by RStudio
export RSTUDIO_AUTH=$(readlink -f "<%= working_dir_container %>/bin/auth")

source "<%= working_dir_container %>/.env"

<% if context.r_provider == "miniconda" %>
source <%= context.miniconda_path.split(":")[0] %>/activate
<% if context.miniconda_path.include? ":" %>
conda activate <%= context.miniconda_path.split(":")[1] %>
<% end %>
export RSTUDIO_WHICH_R=$(which R)
<% end %>

# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="<%= working_dir_container %>/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "<%= working_dir_host %>/rsession.sh" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  export RSESSION_LOG_FILE="<%= working_dir_container %>/rsession.log"

  exec &>>"\${RSESSION_LOG_FILE}"

<% if context.r_provider == "miniconda" %>
  source <%= context.miniconda_path.split(":")[0] %>/activate
  <% if context.miniconda_path.include? ":" %>
  conda activate <%= context.miniconda_path.split(":")[1] %>
  <% end %>
  export RSTUDIO_WHICH_R=\$(which R)
<% end %>

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession $(if [[ ! -z "${R_LIBS_USER}" ]]; then echo --r-libs-user "${R_LIBS_USER}"; fi) "\${@}"
EOL
)
chmod 700 "<%= working_dir_host %>/rsession.sh"

# Set working directory to home directory
cd "${HOME}"

# Output debug info
hostname

set -x
# Launch the RStudio Server
echo "Starting up rserver..."

# Dump environment without functions for use in rsession.sh, filtering readonly variables
(set -o posix; set) | grep -vP '^(BASHOPTS|BASH_VERSINFO|EUID|PPID|SHELLOPTS|UID)' > "<%= working_dir_container %>/.env"

CLUSTER_USER=$(echo $USER | sed -e 's/@CHARITE/_c/' -e 's/@MDC-BERLIN/_m/')
#BINDS=$(readlink -f /fast/users/$CLUSTER_USER),$(readlink -f /fast/users/$CLUSTER_USER/work),$(readlink -f /fast/users/$CLUSTER_USER/scratch)
#BINDS=/fast/users,/fast/projects/,/fast/groups,/fast/home,/fast/work,/fast/scratch
if [[ -d /fast ]]; then
    BINDS=/data,/fast
else
    BINDS=/data
fi

if [[ "$RSTUDIO_SERVER_IMAGE" = *rocker-rstudio* ]]; then
    # We use the converted Docker image and actually have to call rserver
    command=rserver
    # Must pass --server-user arg to disable user switch.
    server_user="--server-user $USER"
    # Increase log level and write to stderr
    export RS_LOG_LEVEL=debug
    export RS_LOGGER_TYPE=stderr
    # Also, create some bind directories as the singularity image is read-only
    mkdir -p /tmp/var-lib-rstudio-server
    mkdir -p /tmp/var-run-rstudio-server
    BINDS="$BINDS,/tmp/var-lib-rstudio-server:/var/lib/rstudio-server,/tmp/var-run-rstudio-server:/var/run/rstudio-server"
else
    # For our singularity builds, the call to rserver is implicit
    command=
    # No need to pass --server-user arg
    server_user=
fi

singularity run --no-home -B "$BINDS" \
    "$RSTUDIO_SERVER_IMAGE" \
  $command \
  $server_user \
  --www-port "${port}" \
  --auth-none 0 \
  --secure-cookie-key-file /tmp/${SLURM_JOB_ID}_${USER}_rstudio-secure-cookie-key \
  --auth-pam-helper-path "${RSTUDIO_AUTH}" \
  --auth-encrypt-password 0 \
  $(if [[ "$RSTUDIO_WHICH_R" != "" ]]; then echo --rsession-which-r "${RSTUDIO_WHICH_R}"; fi)\
  --rsession-path "${RSESSION_WRAPPER_FILE}"
